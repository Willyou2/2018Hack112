Introducing... Bootleg MS Paint!

Description:
Designed to be a paint software that runs in python utilizing the modules Tkinter and PIL. It will include a color wheel to select colors, drawing, filling, clearing, and more. 

Competitive Analysis:
One of the biggest components of this project is its similarity to other paint softwares. While there are components that cannot rival the advanced algorithms utilized and faster runtime of MS paint (which likely uses C), there is more opportunity to do certain actions in this software. The key component will be its ability to perform every function as it would with your regular drawings as with any downloaded image from online. In fact, an issue observed with MS paint is its inability to fill in pictures from the internet due to very specific color choices. By dumbing it down to more generalized definitions of colors, it is easier to fill in such colors. 

Structural Plan:
Simply a gui that contains buttons to perform particular functions. It will have a paint canvas, where you can perform your functions on. 

Algorithmic Plan:
One big algorithm that needs to be completed is the floodfill. One issue is its inefficiency and breaks. The breaks occur due to the cumbersome placement of buttons and strange issue with the tkinter events. The inefficiency will have to be corrected. Looking at my current creation, one issue is the fact that because it recursively fills in the board as you draw, it lags and causes the board to look like bumpy circles (which can be shown after loading a saved image of what was drawn). One way to counter this would definitely think about how we can save the board. In fact, when drawing and whatnot, its not important to change the board every time. Idea is to make it only change the board whenever a function such as fill is called (which depends on the board). 
Also to deal with the bumps, we could also try to make it more smooth by making it a series of lines where everytime timefired is called, it uses the previous point as the first point. However, this will make the object look jagged.

Also, thanks to a source, to make drawing faster, instead of calling it every iteration, use the B1-Pressed lambda event from tkinter (which I know about from before). Even if you think it's just called in the same delay of like reDrawAll, it actually runs faster (idk why)

Timeline:
Idea is to complete and optimize how I draw and fill in a pixel board by the end of this week. In addition, I will attempt to implement the color wheel scheme. I will also work on completing the save and load functions.
The following week, I will work on optimizing the fill function. In addition, I will add key components such as drawing shapes.

Version Control Plan: Github

Module List: Tkinter, PIL

TP2 Update
Continued to try and work on fill function. Because of python's huge allocation of memory compared to C, it reaches the issue of stack overflow. 
I've also worked on implementing a rectangle drawer. The rectangle drawing function was quite difficult in terms of the mathematics behind it, but the general idea is pretty simple.
I also implemented a line drawing function, where I made use of an algorithm I learned about: Bresenham's algorithm. Because it only applies to width 1, the idea to deal with a larger width is to run the algorithm nested within itself, where the first call goes through the width of the line while each recursive call would run the algorithm lengthwise. The mathematics behind the implementation was quite difficult to work with.
I updated the save and load function so despite the way I run tkinter (not MVC, since it doesnt redraw anything), I realized that root = Tk() is just an instance of the class in tkinter, so I utilized a different instance of tkinter where the mainframe was continually updated to allow the user to give the image a name and load an image with a specific name. 

I plan to implement a color wheel and to implement a sort of file explorer utilizing tkinter's fileio. If I have time, I will try an implement a modified version of Bresenham's algorithm to draw out ellipses.


TP3 Update
Was a very difficult journey. Had to rework entire color registration process from a list of colors to the basic colors in rgb format and a color selection from Tkinter's built in module. By utilizing the rgb tuple, I recreated the board. I had some filling issues with loading pictures I drew, where it would only fill in small areas. I suspected this could be due to some blending algorithm, and I was almost right: python's PIL module, when loading images, does a luminosity approximation on the image to approximate pixel rgb values, which explains why my debugging gave me 5,5,5 sometimes instead of 0,0,0. By experimentation and practical values, I determined that at most, a person's vision would not be able to easily tell the difference as long as each rgb value lay less than 50 from the color desired. 
In addition to a color fix, I worked on my load function, which I learned that saving images with certain sizes actually does not properly cover the entire board but instead has that many pixels (aka 50 pixels is 0 to 49). 
I added a functionality to produce a help menu and title page. The help menu allows the user to use the next and back buttons to navigate through the slides to learn about each functionality. I also added a coordinate display at the bottom so the user could gather information about what he/she is looking at. 
The last functionality I added was the resizing of images. An image loaded will always be resized to fit in the paint program, so you can load images that weren't created by the program as well and fiddle around. This was quite exciting, as one of the important features is that a combination of approximation and resizing allows me to perform fill functions on these loaded images without worrying too much about precision of color to get the general fill, while programs like ms Paint are too precise.
The one bug I could not fix because the constraints of python's allocation of memory is the stack overflow issue from floodfill. When filling large areas, the computer simply cannot allocate enough memory to run so many recursive calls. Python does not allocate memory as efficiently as C does, leading more memory to be wasted quickly. 

Youtube Video:
https://youtu.be/Y1AXyqudt0M